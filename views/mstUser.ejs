<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User</title>
    <!-- Add Bootstrap CSS link -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Additional styles to refine the look of the chat */
        #chatPanel {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        /* Optional: Add custom styling */
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            padding: 10px;
        }
        
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
<!-- Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Realtime Messaging</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item menu-user">
                    <a class="nav-link active" href="/view/user">User</a>
                </li>
                <li class="nav-item menu-message">
                    <a class="nav-link" href="/view/message">Message</a>
                </li>
                <li class="nav-item">
                    <a href="javascript:void(0)" class="nav-link text-danger" onclick="logout()">Logout</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container mt-4" id="chatPanel">
    <div class="d-flex justify-content-between align-items-center">
        <h4>Hello, <b class="menu-me"></b></h4>
        <button class="btn btn-primary mb-4" onclick="loadUsers()">Refresh Users</button>
    </div>

    <!-- Users Table -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th hidden>Role ID</th>
                <th>Role</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="userTable">
            <!-- User data will be injected here -->
        </tbody>
    </table>

    <!-- Form to add/edit user -->
    <h3 id="formTitle">Add New User</h3>
    <form id="userForm">
        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" id="username" class="form-control" placeholder="Username" required />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" id="email" class="form-control" placeholder="Email" required />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" id="password" class="form-control" placeholder="Password" required />
        </div>
        <div class="mb-3">
            <label for="role_id" class="form-label">Role ID</label>
            <select id="role_id" class="form-control" required>
                <option value="">Select a Role</option>
            </select>
        </div>
        <button type="submit" class="btn btn-success" id="submitButton">Add User</button>
    </form>
</div>

<!-- Add Bootstrap JS and dependencies -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

<script>
    let editingUserId = null;  // This will hold the user ID of the user being edited

    function getCookie(name) {
        const cookies = document.cookie.split('; ');
        for (let i = 0; i < cookies.length; i++) {
            const [key, value] = cookies[i].split('=');
            if (key === name) {
                return decodeURIComponent(value);
            }
        }
        return null;  // Return null if the cookie is not found
    }

    async function loadUsers() {
        try {
            const response = await fetch('/auth/users', {
                headers: { 'Authorization': `Bearer ${getCookie('token')}` }
            });
            const users = await response.json();
            const userTable = document.getElementById('userTable');
            userTable.innerHTML = '';
            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td hidden>${user.role_id}</td>
                    <td>${user.role_name}</td>
                    <td>${user.is_email_verified == 1}</td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editUser(${user.user_id})">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteUser(${user.user_id})">Delete</button>
                        <button class="btn btn-secondary btn-sm" onclick="activateUser(${user.user_id})">Activate</button>
                    </td>
                `;
                userTable.appendChild(row);
            });
            resetForm();
        } catch (error) {
            console.error('Failed to load users:', error);
        }
    }

    async function loadMe() {
        try {
            const response = await fetch('/auth/me', {
                headers: { 'Authorization': `Bearer ${getCookie('token')}` }
            });
            const user = await response.json();
            
            // Set the username to the menu-me element
            document.querySelector('.menu-me').innerHTML = user.username;
            
            // Super Admin
            if(user.role_id != 6) {
                document.querySelectorAll('.menu-user').forEach(element => {
                    element.classList.add('hidden');
                });
            }
        } catch (error) {
            console.error('Failed to load users:', error);
        }
    }

    async function addUser(event) {
        event.preventDefault();

        const username = document.getElementById('username').value;
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const role_id = document.getElementById('role_id').value;

        try {
            let response;

            if (editingUserId) {
                // If editing a user, update their information
                response = await fetch(`/auth/update/${editingUserId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getCookie('token')}`
                    },
                    body: JSON.stringify({ email, role_id, password })
                });
            } else {
                // If creating a new user
                response = await fetch('/auth/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getCookie('token')}`
                    },
                    body: JSON.stringify({ username, email, password, role_id })
                });
            }

            const result = await response.json();
            alert(result.message);

            if (response.ok) {
                loadUsers();
                resetForm();
            }
        } catch (error) {
            console.error('Failed to add/update user:', error);
        }
    }

    async function deleteUser(userId) {
        // Show a confirmation dialog before proceeding with deletion
        const isConfirmed = window.confirm("Are you sure you want to delete this user?");

        if (!isConfirmed) {
            return; // If the user cancels, stop the deletion process
        }

        try {
            const response = await fetch(`/auth/delete/${userId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${getCookie('token')}` }
            });

            const result = await response.json();
            
            if (response.ok) {
                alert(result.message); // Show success message
                loadUsers(); // Reload users after deletion
            } else {
                alert(`Error: ${result.message}`); // Show error message if the deletion fails
            }

        } catch (error) {
            console.error('Failed to delete user:', error);
            alert('Failed to delete user. Please try again later.');
        }
    }

    async function activateUser(userId) {
        // Show a confirmation dialog before proceeding with deletion
        const isConfirmed = window.confirm("Are you sure you want to activate this user?");

        if (!isConfirmed) {
            return; // If the user cancels, stop the deletion process
        }

        try {
            const response = await fetch(`/auth/activate/${userId}`, {
                method: 'PUT',
                headers: { 'Authorization': `Bearer ${getCookie('token')}` }
            });

            const result = await response.json();
            
            if (response.ok) {
                alert(result.message); // Show success message
                loadUsers(); // Reload users after deletion
            } else {
                alert(`Error: ${result.message}`); // Show error message if the deletion fails
            }

        } catch (error) {
            console.error('Failed to delete user:', error);
            alert('Failed to delete user. Please try again later.');
        }
    }

    function editUser(userId) {
        // Find the row based on userId (assuming userId is in a data attribute of the row or buttons)
        const row = document.querySelector(`button[onclick="editUser(${userId})"]`).closest('tr');

        // Extract data from the row
        const username = row.querySelector('td:nth-child(1)').textContent;
        const email = row.querySelector('td:nth-child(2)').textContent;
        const roleId = row.querySelector('td:nth-child(3)').textContent;

        // Fill the form with the extracted data
        document.getElementById('username').value = username;
        document.getElementById('email').value = email;
        document.getElementById('role_id').value = roleId;

        // Change form title and button text for editing
        document.getElementById('formTitle').textContent = "Edit User";  // Change title
        document.getElementById('submitButton').textContent = "Edit User"; // Change button text

        // Make the username and email fields read-only
        document.getElementById('username').readOnly = true;
        document.getElementById('email').readOnly = true;
        document.getElementById('password').required = false;

        // Store the userId for later reference when submitting the form
        editingUserId = userId;
    }

    function resetForm() {
        // Reset the input fields
        document.getElementById('username').value = '';
        document.getElementById('email').value = '';
        document.getElementById('role_id').value = '';
        document.getElementById('password').value = ''; // Reset the password field

        // Change form title and button text to "Add User"
        document.getElementById('formTitle').innerText = 'Add New User';
        document.getElementById('submitButton').innerText = 'Add User';

        // Make the Username, Email, and Password fields editable again
        document.getElementById('username').readOnly = false;
        document.getElementById('email').readOnly = false;
        document.getElementById('password').readOnly = false;
        document.getElementById('password').required = true;

        editingUserId = false;
    }

    document.getElementById('userForm').addEventListener('submit', addUser);

    async function loadRoles() {
        try {
            const response = await fetch('/auth/roles');
            if (!response.ok) throw new Error('Failed to fetch roles');
            
            const roles = await response.json();
            const roleSelect = document.getElementById('role_id');

            roles.forEach(role => {
                const option = document.createElement('option');
                option.value = role.role_id;
                option.textContent = role.role_name;
                roleSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Error loading roles:', error);
        }
    }

    // Initial load of users
    loadMe();
    loadUsers();
    loadRoles();

    function logout() {
        // Remove the token from cookies by setting the cookie's expiry date to the past
        document.cookie = "token=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;";

        // Optionally, redirect the user to the login page after logout
        window.location.href = '/view/login'; // Adjust the URL as necessary for your app

        // You could also display a message or handle other UI updates if needed
    }
</script>
</body>
</html>